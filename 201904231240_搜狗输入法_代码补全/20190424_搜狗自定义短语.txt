;  温馨提示：小白建议前一周手写代码，后再入手 
;  参与编辑：可爱小汗(提出想法), 竹兄(制作)
;  创建时间：20181114
;  更新时间：20190424
;  使用方法: 
;            1/补全代码:有些东西没必要手动写一遍
;            2/查看案例:忘了某个功能(函数)使用方法,直接输入查看
;            3/参数百分比化, 以乘法为主

;  更新内容: 按照processing官方API排序分类, 而不是采用a~b顺序排序,便于识别,维护
;  更新内容: 添加注释需要漫长时间, 有空就更新


;  形状 → 自制形状-----------------------------------------------Shape → DIY Primitives

ps,1=PShape s;	//  声明形状
creates,1=createShape();   //  创建形状 s = createShape(RECT, x,y,w,h);  →  shape(s, x,y);
loadsh,1=loadShape();   //   导入形状  s = loadShape("bot.svg");  →  shape(s, x,y,w,h);


;  形状 → 二维形状-----------------------------------------------Shape → 2D Primitives

po,1=point(width *0.5,height *0.5);	//点(x,y)
l,1=line(width *0.5,height *0.5,width *0.1, height *0.1);	//直线(x,y, x,y)
r,1=rect(width *0.5,height *0.5,width *0.1, height *0.1,0,0,0,0);  //矩形(x,y,w,h,四边圆角)
squ,1=square(width *0.5, height *0.5, width *0.1)	//矩形模式(x,y, w=h)
q,1=quad(width *0.5,height *0.5, width *0.6,height *0.5,width *0.6,height *0.6,width *0.5,height *0.6);	//四边形(x,y, x,y, x,y, x,y)
e,1=ellipse(width *0.5,height *0.5,width *0.1,height *0.1);	//椭圆(x,y,w,h)
ci,1=circle(width *0.5, height *0.5, width*0.5);		//椭圆模式(x,y, w=h)
tri,1=triangle(width *0.5,height *0.5,width *0.6,height *0.5, width *0.5,height *0.6);	//三角形(x,y, x,y. x,y)
ar,1=arc(width *0.5,height *0.5, width *0.1, height *0.1, TAU *0.0, TAU *0.5, OPEN);     
//弧形( x,y,w,h,起始弧度,结束弧度,[不闭合/直线闭合/圆心点闭合]), TAU = 6.28 = 360度 , OPEN /CHORD /PIE


;  形状 → 曲线形状-----------------------------------------------Shape → 2D Primitives

bez,1=bezier(width *0.5,height *0.5,width *0.7,height *0.5,width *0.7,height *0.7,width *0.5,height *0.7);	
// 贝赛尔曲线 (x,y, 控制点xy, 控制点xy, x,y)
bezi,1=bezierDetail();	// 贝塞尔曲线分辨率默认20
bezie,1=bezierPoint();`// 贝塞尔曲线
bezier,1=bezierTangent();
cur,1=curve();
curv,1=curveDetail();
curve,1=curvePoint();
curvet,1=curveTangent();
curveti,1=curveTightness();



ab,1=abs();	// 
ac,1=acos();
al,1=alpha();
am,1=ambient();
amb,1=ambientLight();
ap,1=append();
app,1=applyMatrix();	
array,1=arrayCopy();
arr,1=ArrayList<al> als = new ArrayList<al>();
as,1=asin();
at,1=atan();
ata,1=atan2();
b,1=background(255 *0.0, 255 *0.0, 255 *0.0 , 255 *1.0);
beginc,1=beginCamera();
beg,1=beginContour();
begi,1=beginRaw();
begin,1=beginRecord();
be,1=
bezierv,1=bezierVertex();
bi,1=binary();
blen,1=blend();
ble,1=blendMode();
bl,1=blue();
bo,1=boolean bl = ture;	//false
boo,1=boolean();
box,1=box();
br,1=break;
bri,1=brightness();
bu,1=BufferedReader;
by,1=byte b = 23;
cam,1=camera();
ca,1=case;
cat,1=catch;
ce,1=ceil();
ch,1=char c = 'A';
cha,1=charAt(i); 
cle,1=clear();
cli,1=clip();
c,1=color;
co,1=color(255 *0.0, 255 *0.0, 255 *0.0 , 255 *1.0);	//#FFCC00;
colo,1=colorMode(HSB,360 *0.1,100 *0.1,100 *0.1);
con,1=concat();
cons,1=constrain(x,0,233);
cont,1=continue;
cop,1=copy();
cos,1=cos();
cr,1=createFont();
cre,1=createGraphics();
crea,1=createImage();
creat,1=createInput();
create,1=createOutput();
creater,1=createReader();
createw,1=createWriter();
cu,1=cursor();
curvev,1=curveVertex();
da,1=day();
deg,1=degrees();
del,1=delay();
di,1=directionalLight();
dis,1=displayDensity();
d,1=dist(x1,y1,x2,y2);
do,1=double dou = 3.1415D;  //小数点后面64位
dou,1=DoubleDict;
doub,1=DoubleList;
dr,1=draw();
el,1=ellipseMode();
em,1=emissive();
en,1=endCamera();
end,1=endContour();
endr,1=endRaw();
endre,1=endRecord();
ends,1=endShape();
ex,1=exit();
exp,1=exp();
expa,1=expand();
ext,1=extends;
f,1=fill(233,0,0,255);
fi,1=filter();
fin,1=final;
fl,1=float flo = 3.14; //小数点后面32位
flo,1=float();
floa,1=FloatDict;
float,1=FloatList;
floo,1=floor();
foc,1=focused;
fr,1=frameCount;
fra,1=frameRate(24);
fru,1=frustum();
fu,1=fullScreen();
ge,1=get();
g,1=green();
ha,1=HALF_PI;  //PI HALF_PI QUARTER_PI TAU TWO_PI
has,1=HashMap;
h,1=height
hex,1=hex();
ho,1=hour();
hu,1=hue();
im,1=image();
ima,1=imageMode();
imp,1=implements;
impo,1=import;
in,1=int x = 23;  //最多32位
int,1=int();
intd,1=IntDict;
intl,1=IntList;
j,1=join();
js,1=JSONArray;
jso,1=JSONObject;
ke,1=key;
key,1=keyCode;
k,1=keyPressed;
keyp,1=keyPressed();
keyr,1=keyReleased();
keyt,1=keyTyped();
la,1=launch();
le,1=lerp();
ler,1=lerpColor();
li,1=lightFalloff();
lig,1=lights();
ligh,1=lightSpecular();
load,1=loadBytes();
loa,1=loadFont();
lo,1=loadImage();
loadj,1=loadJSONArray();
loadjs,1=loadJSONObject();
loadp,1=loadPixels();
loads,1=loadShader();
loadst,1=loadStrings();
loadt,1=loadTable();
loadx,1=loadXML();
log,1=log();
lon,1=long l = 233;  //最多64位
long,1=LongDict;
longl,1=LongList;
loo,1=loop();
mag,1=mag();
ma,2=map(x,0,width,0,1);
mat,1=match();
matc,1=matchAll();
max,1=max();
mi,1=millis();
min,1=min();
minu,1=minute();
model,1=modelX();
mod,1=modelY();
mode,1=modelZ();
mon,1=month();
mouseb,1=mouseButton;
mous,1=mouseClicked();
mouse,1=mouseDragged();
mousem,1=mouseMoved();
mou,1=mousePressed
mousepr,1=mousePressed();
mouser,1=mouseReleased();
mousew,1=mouseWheel();
m,1=mouseX,mouseY
ne,1=new;
nf,1=nf();
nfc,1=nfc();
nfp,1=nfp();
nfs,1=nfs();
no,1=noClip();
noc,1=noCursor();
n,1=noFill();
noi,1=noise();
nois,1=noiseDetail();
noise,1=noiseSeed();
nol,1=noLights();
nolo,1=noLoop();
nor,1=norm();
norm,1=normal();
nos,1=noSmooth();
nost,1=noStroke();
not,1=noTint();
nu,1=null;
o,1=Object;
or,1=ortho();
pro,1=processing
pars,1=parseJSONArray();
pa,1=parseJSONObject();
par,1=parseXML();
png,1=save("xxx.png");
pe,1=perspective();
pg,1=PGraphics;
pi,1=PI;  //PI HALF_PI QUARTER_PI TAU TWO_PI
pix,1=pixelDensity();
pixe,1=pixelHeight;
pixel,1=pixels[];
pixelw,1=pixelWidth;
pm,1=pmouseX,pmouseY;
poi,1=pointLight();
pop,1=popMatrix();
pops,1=popStyle();
pow,1=pow();
pr,1=print(); 
pri,1=printArray();
prin,1=printCamera();
print,1=println("out"+);
printm,1=printMatrix();
printp,1=printProjection();
printw,1=PrintWriter;
priv,1=private;
ps,1=PShader;
pub,1=public;
pu,1=
pushMatrix();
  translate(width *0.5,height *0.5);
popMatrix();
push,1=pushStyle();
pv,1=PVector;
q,1=quad(width *0.5,height *0.5, width *0.1,width *0.1,97,97,158,158);
qu,1=quadraticVertex();
quar,1=QUARTER_PI;
rad,1=radians();
ra,1=random(0,233);
ran,1=randomGaussian();
rand,1=randomSeed();
re,1=rectMode(CENTER);
red,1=red();
redr,1=redraw();
req,1=requestImage();
res,1=resetMatrix();
rese,1=resetShader();
ret,1=return;
rev,1=reverse();
ro,1=rotate();
rot,1=rotateX();
rota,1=rotateY();
rotat,1=rotateZ();
rou,1=round();
sat,1=saturation();
sa,1=save("logo.png");
sav,1=saveBytes();
save,1=saveFrame("logo-######.png");
savej,1=saveJSONArray();
savejs,1=saveJSONObject();
saves,1=saveStream();
savest,1=saveStrings();
savet,1=saveTable();
savex,1=saveXML();
sc,1=scale();
scr,1=screenX();
scre,1=screenY();
scree,1=screenZ();
sec,1=second();
sel,1=selectFolder();
sele,1=selectInput();
selec,1=selectOutput();
set,1=set();
sett,1=settings();
se,1=setup();
sh,1=shader();
sha,1=shape();
shap,1=shapeMode();
she,1=shearX();
shea,1=shearY();
shi,2=shininess();
sho,1=shorten();
sin,1=sin();
si,1=size(666,233);
sm,1=smooth(1);
sor,1=sort(); 
sp,1=specular();
sph,1=sphere();
sphe,1=sphereDetail();
spl,1=splice();
spli,1=split();
split,1=splitTokens();
spo,1=spotLight();
sq,1=sq();
sqr,1=sqrt();
sta,1=static;
st,1=str();
str,1=String str = "hello processing";
stri,1=StringDict;
strin,1=StringList;
s,1=stroke(255 *0.0,255 *0.0,255 *0.0, 255 *1.0);
stro,1=strokeCap();
strok,1=strokeJoin();
stroke,1=strokeWeight();
su,1=subset();
sup,1=super;
tab,1=Table;
ta,1=TableRow;
tan,1=tan();
tau,1=TAU;  //PI HALF_PI QUARTER_PI TAU TWO_PI
t,1=text();
text,1=textAlign(CENTER); 	//CENTER, LEFT, RIGHT
texta,1=textAscent();
textd,1=textDescent();
textf,1=textFont();
textl,1=textLeading();
te,1=textMode();
tga,1=save("xxx.tga");
tex,1=textSize();
textu,1=texture();
textur,1=textureMode();
texture,1=textureWrap();
textw,1=textWidth();
th,1=this
thr,1=thread();
ti,1=tint();
tif,1=save("xxx.tif");
tr,1=translate();
trim,1=trim();
try,1=try;
tu,1=ture;
tw,1=TWO_PI;  //PI HALF_PI QUARTER_PI TAU TWO_PI
u,1=unbinary();
un,1=unhex();
up,1=updatePixels();
ve,1=vertex(width *0.5,height *0.5);
wh,1=while
w,1=width *0.5,height *0.5
wi,1=width
x,1=x
xm,1=XML;
ye,1=year(12);


;  框架 → 基础框架----------------------------------------------------------

v,1=
void newV1()
{

}

vo,1=
//P2D模式
void setup()
{
  size(666,666,P2D);   //P2D, P3D, FX2D, PDF, SVG, 
}

void draw()
{

}

vo,2=
//P3D模式
void setup()
{
  size(666,666,P3D);   //P2D, P3D, FX2D, PDF, SVG, 
}

void draw()
{

}

;  框架 → 绘制形状----------------------------------------------------------

beginShape(LINES);	//不填写, LINES ,
  vertex(width *0.5,height *0.5);
  vertex(width *0.5,height *0.5);       
endShape(CLOSE);	//不填写, OPEN,CLOSE


;  框架 → 功能框架----------------------------------------------------------

fo,1=
for(int i=0; i<xxx.length; i++)  //< > == 
{

}

el,2=
else
{

}

cl,1=
class newc1
{
  
  newc1()
  {

  }

  void newv1()
  {

  }
}

i,1=
if(xxx < yyy)	//!= < <= == > >= ! && || 
{

}

if,1=
if(xxx < yyy)	//!= < <= == > >= ! && || 
{

}
else if(xxx < yyy)
{

}
else
{

}

sw,1=
switch(xxx) 
{
case 'A':                        
break;
                            
case 'B': 
break;
                            
default:
break;
}

svg,1=
//svg导出
import processing.svg.*;
//其他方式查看官网

void setup() 
{
  size(666, 666, SVG, "xxx.svg");  //P2D, P3D, FX2D, PDF, SVG,    
}

void draw() 
{
  
  exit();
}

svg,2=
//svg导入
import processing.svg.*;
PShape circle;
void setup() 
{
  size(666,666,P2D); //P2D, P3D, FX2D, PDF, SVG,   
  circle = loadShape("xxx.svg");
}

void draw() 
{
  shape(circle,width *0.5,height *0.5, width *0.2, height *0.2);
}

pdf,1=
//pdf导出
import processing.pdf.*;

void setup() 
{
  size(666,666,P2D); //P2D, P3D, FX2D, PDF, SVG,
  noLoop();
  beginRecord(PDF, "xxx.pdf"); 
}

void draw() 
{

  endRecord();
}

ke,2=
//键盘控制上下左右
if(keyPressed && key == CODED){
    if(keyCode == LEFT){
      x--;
    }else if(keyCode == RIGHT){
      x++;
    }else if(keyCode == UP){
      y--;
    }else if(keyCode == DOWN){
      y++;
    }
  }
  
dxf,1=
import processing.dxf.*;

boolean record;

void setup() 
{
  size(666, 666, P3D);  //P2D, P3D, FX2D, PDF, SVG,   
}

void draw() 
{
  if (record) 
 {
    beginRaw(DXF, "xxx.dxf");
  }

  if (record) 
  {
    endRaw();
    record = false;
  }
}
void keyPressed() 
{
  if (key == 'r') 
  {
  	record = true;
  }
}


gif,1=
//导出gif
import gifAnimation.*;
GifMaker gifExport;

float x; 

void setup() 
{
  size(666,666,P2D);   //P2D, P3D, FX2D, PDF, SVG, 
  frameRate(30);	//每秒钟几张图
  noCursor();	//隐藏鼠标

  gifExport = new GifMaker(this, "xxx.gif");
  gifExport.setRepeat(0);        
  gifExport.setTransparent(255 *0.0,255 *1.0,255 *0.0);  //指定颜色为透明（红色，绿色，蓝色）  

}

void draw() 
{
  background(255 *0.0, 255 *0.0, 255 *0.0, 255 *1.0);
  
  stroke(255 *0.9,255 *0.0,255 *0.0, 255 *1.0);
  translate(width *0.5,height *0.5);
  rotate(x++);
  line(width *0.0,height *0.0,width *0.1,height *0.1); 

  gifExport.setDelay(1);
  gifExport.addFrame();
  if(x % 5 == 0)  //通过余数实现动画录制
  {
    gifExport.finish();
  } 
}

gifin,1=
//导入gif
import gifAnimation.*;
Gif myAnimation;

void setup() 
{
    size(666,666,P2D); //P2D, P3D, FX2D, PDF, SVG,   
    myAnimation = new Gif(this, "xxx.gif");
    myAnimation.play();
}

void draw() 
{
    image(myAnimation, width *0.1, height *0.1);
}


;  框架 → 音频输入----------------------------------------------------------

so,2=
//麦克风输入
import processing.sound.*;    
                            
AudioIn ai;                             
Amplitude ampl;     
                            
void setup()    
{
    size(666,666,P2D);   //P2D, P3D, FX2D, PDF, SVG,   
                            
    ai = new AudioIn(this,0);   
    ai.play();      
                            
    ampl = new Amplitude(this);     
    ampl.input(ai);    
}
                            
void draw()     
{
    float v = ampl.analyze();                          
}       

so,1=
//播放音频
import processing.sound.*;      
                            
SoundFile s;    
                                    
void setup()  
{
    size(666,666,P2D); //P2D, P3D, FX2D, PDF, SVG,    
    s = new SoundFile(this,"xxx.mp4");   
    s.play();    
}
                                    
void draw()    
{
            
}  


;  框架 → 视频输入----------------------------------------------------------

vi,1=
//摄像头
import processing.video.*;    
                            
Capture video; 
                            
void setup()      
{
    size(666,666,P2D);   //P2D, P3D, FX2D, PDF, SVG, 
    video = new Capture(this,320,240,30);   
    video.start();      
}
                            
void draw()   
{
    if(video.available())  video.read();       
                            
    image(video,width *0.0, height *0.0);   
}  


vi,2=
//视频播放
import processing.video.*;    

Movie video;    
                            
void setup()    
{
    size(666,666,P2D);   //P2D, P3D, FX2D, PDF, SVG,   
    video = new Movie(this, "xxx.mp4");  
    video.play();   
}
                            
void draw()    
{
    if(video.available())  video.read(); 
                            
    image(video,width *0.0, height *0.0);    
}  


;  框架 → 图片导入----------------------------------------------------------

p,1=
//图片导入
PImage img;    

void setup()    
{
    size(666,666,P2D);   //P2D, P3D, FX2D, PDF, SVG, 
    img = loadImage("xxx.png");  
}
                                            
void draw()  
{
    image(img,width *0.0, height *0.0);      
}


;  框架 → 字体导入----------------------------------------------------------

pf,1=
PFont f;    

void setup()  
{
    size(666,666,P2D);   //P2D, P3D, FX2D, PDF, SVG,   
    f = createFont( "宋体", 24, true);  
}
                                                    
void draw()    
{
    textFont(f,36);     
    fill(255 *0.0, 255 *0.0, 255 *0.0, 255 *1.0);   
    text("你好p5" ,width *0.5,height *0.5);            
}
